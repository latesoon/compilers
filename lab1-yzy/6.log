*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = '6.ll'
source_filename = "6.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@c = dso_local global float 0x400F0A3D80000000, align 4
@.str = private unnamed_addr constant [13 x i8] c"a[2]=%d c=%f\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %31

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

31:                                               ; preds = %12, %6
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}

declare i32 @printf(i8* noundef, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = '6.ll'
source_filename = "6.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@c = dso_local global float 0x400F0A3D80000000, align 4
@.str = private unnamed_addr constant [13 x i8] c"a[2]=%d c=%f\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %31

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

31:                                               ; preds = %12, %6
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}

declare i32 @printf(i8* noundef, ...) #1

attributes #0 = { noinline nounwind optnone uwtable "frame-pointer"="all" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { "frame-pointer"="all" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }

!llvm.module.flags = !{!0, !1, !2, !3, !4}
!llvm.ident = !{!5}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 1}
!4 = !{i32 7, !"frame-pointer", i32 2}
!5 = !{!"Ubuntu clang version 14.0.0-1ubuntu1.1"}
!6 = distinct !{!6, !7}
!7 = !{!"llvm.loop.mustprogress"}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %31

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

31:                                               ; preds = %12, %6
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %31

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

31:                                               ; preds = %12, %6
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %31

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

31:                                               ; preds = %12, %6
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %31

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

31:                                               ; preds = %12, %6
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %31

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

31:                                               ; preds = %12, %6
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %31

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

31:                                               ; preds = %12, %6
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %31

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

31:                                               ; preds = %12, %6
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %31

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

31:                                               ; preds = %12, %6
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %31

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

31:                                               ; preds = %12, %6
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

; Loop:
6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

17:                                               ; preds = %13
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

; Exit blocks
.loopexit:                                        ; preds = %6
  br label %31

12:                                               ; preds = %9
  br label %31
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

; Loop:
6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

17:                                               ; preds = %13
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

; Exit blocks
.loopexit:                                        ; preds = %6
  br label %31

12:                                               ; preds = %9
  br label %31
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

; Loop:
6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

17:                                               ; preds = %13
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

; Exit blocks
.loopexit:                                        ; preds = %6
  br label %31

12:                                               ; preds = %9
  br label %31
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

; Loop:
6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

17:                                               ; preds = %13
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

; Exit blocks
.loopexit:                                        ; preds = %6
  br label %31

12:                                               ; preds = %9
  br label %31
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores (expandmemcmp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Exception handling preparation (dwarfehprepare) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca [3 x i32], align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 2, i32* %3, align 4
  %5 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  store i32 1, i32* %5, align 4
  store i32 0, i32* %4, align 4
  br label %6

6:                                                ; preds = %28, %0
  %7 = load i32, i32* %4, align 4
  %8 = icmp slt i32 %7, 15
  br i1 %8, label %9, label %.loopexit

9:                                                ; preds = %6
  %10 = load float, float* @c, align 4
  %11 = fcmp oeq float %10, 1.000000e+00
  br i1 %11, label %12, label %13

12:                                               ; preds = %9
  br label %31

13:                                               ; preds = %9
  %14 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %15 = load i32, i32* %14, align 4
  %16 = icmp eq i32 %15, 10
  br i1 %16, label %17, label %18

17:                                               ; preds = %13
  br label %28

18:                                               ; preds = %13
  %19 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %20 = load i32, i32* %19, align 4
  %21 = add nsw i32 %20, 1
  store i32 %21, i32* %19, align 4
  %22 = load float, float* @c, align 4
  %23 = load i32, i32* %3, align 4
  %24 = sitofp i32 %23 to float
  %25 = fdiv float %22, %24
  %26 = load float, float* @c, align 4
  %27 = fadd float %26, %25
  store float %27, float* @c, align 4
  br label %28

28:                                               ; preds = %18, %17
  %29 = load i32, i32* %4, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %4, align 4
  br label %6, !llvm.loop !6

.loopexit:                                        ; preds = %6
  br label %31

31:                                               ; preds = %.loopexit, %12
  %32 = getelementptr inbounds [3 x i32], [3 x i32]* %2, i64 0, i64 2
  %33 = load i32, i32* %32, align 4
  %34 = load float, float* @c, align 4
  %35 = fpext float %34 to double
  %36 = call i32 (i8*, ...) @printf(i8* noundef getelementptr inbounds ([13 x i8], [13 x i8]* @.str, i64 0, i64 0), i32 noundef %33, double noundef %35)
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection (amdgpu-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
368B	  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
384B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
400B	  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
416B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
432B	  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
448B	  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
464B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

480B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

496B	  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
512B	  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
528B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
544B	  JMP_1 %bb.1

560B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

576B	  JMP_1 %bb.9

592B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

608B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
624B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
640B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
656B	  %24:gr64 = MOV64ri @.str
672B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = COPY %24:gr64
704B	  $esi = COPY %31:gr32
720B	  $xmm0 = COPY %29:fr64
736B	  $al = MOV8ri 1
752B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
768B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  %27:gr32 = COPY $eax
800B	  %23:gr32 = MOV32r0 implicit-def $eflags
816B	  $eax = COPY %23:gr32
832B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
368B	  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
384B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
400B	  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
416B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
432B	  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
448B	  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
464B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

480B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

496B	  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
512B	  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
528B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
544B	  JMP_1 %bb.1

560B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

576B	  JMP_1 %bb.9

592B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

608B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
624B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
640B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
656B	  %24:gr64 = MOV64ri @.str
672B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
688B	  $rdi = COPY %24:gr64
704B	  $esi = COPY %31:gr32
720B	  $xmm0 = COPY %29:fr64
736B	  $al = MOV8ri 1
752B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
768B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
784B	  %27:gr32 = COPY $eax
800B	  %23:gr32 = MOV32r0 implicit-def $eflags
816B	  $eax = COPY %23:gr32
832B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 %18:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr %14:fr32(tied-def 0), %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 %22:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %24:gr64
  $esi = COPY %31:gr32
  $xmm0 = COPY %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %27:gr32 = COPY $eax
  %23:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %23:gr32
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed %3:fr32, killed %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 killed %18:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr killed %14:fr32(tied-def 0), killed %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm killed %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr killed %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %24:gr64
  $esi = COPY killed %31:gr32
  $xmm0 = COPY killed %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %27:gr32 = COPY killed $eax
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %23:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed %3:fr32, killed %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 killed %18:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr killed %14:fr32(tied-def 0), killed %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm killed %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr killed %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %24:gr64
  $esi = COPY killed %31:gr32
  $xmm0 = COPY killed %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %27:gr32 = COPY killed $eax
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %23:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed %3:fr32, killed %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 killed %18:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr killed %14:fr32(tied-def 0), killed %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm killed %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr killed %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %24:gr64
  $esi = COPY killed %31:gr32
  $xmm0 = COPY killed %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %27:gr32 = COPY killed $eax
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %23:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed %3:fr32, killed %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = ADD32ri8 killed %18:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = DIVSSrr killed %14:fr32(tied-def 0), killed %13:fr32, implicit $mxcsr
  %8:fr32 = ADDSSrm killed %11:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = ADD32ri8 killed %22:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr killed %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %24:gr64
  $esi = COPY killed %31:gr32
  $xmm0 = COPY killed %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %27:gr32 = COPY killed $eax
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %23:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed %3:fr32, killed %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = COPY killed %18:gr32
  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = COPY killed %14:fr32
  %11:fr32 = DIVSSrr %11:fr32(tied-def 0), killed %13:fr32, implicit $mxcsr
  %8:fr32 = COPY killed %11:fr32
  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = COPY killed %22:gr32
  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr killed %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %24:gr64
  $esi = COPY killed %31:gr32
  $xmm0 = COPY killed %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %27:gr32 = COPY killed $eax
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %23:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed %3:fr32, killed %2:fr32, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  %17:gr32 = COPY killed %18:gr32
  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed %17:gr32 :: (store (s32) into %ir.19)
  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  %11:fr32 = COPY killed %14:fr32
  %11:fr32 = DIVSSrr %11:fr32(tied-def 0), killed %13:fr32, implicit $mxcsr
  %8:fr32 = COPY killed %11:fr32
  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed %8:fr32 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  %21:gr32 = COPY killed %22:gr32
  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  %29:fr64 = CVTSS2SDrr killed %30:fr32, implicit $mxcsr
  %24:gr64 = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY killed %24:gr64
  $esi = COPY killed %31:gr32
  $xmm0 = COPY killed %29:fr64
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %27:gr32 = COPY killed $eax
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %23:gr32
  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr killed %3:fr32, killed %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
368B	  %17:gr32 = COPY killed %18:gr32
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed %17:gr32 :: (store (s32) into %ir.19)
416B	  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
448B	  %11:fr32 = COPY killed %14:fr32
464B	  %11:fr32 = DIVSSrr %11:fr32(tied-def 0), killed %13:fr32, implicit $mxcsr
480B	  %8:fr32 = COPY killed %11:fr32
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %21:gr32 = COPY killed %22:gr32
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr killed %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY killed %24:gr64
768B	  $esi = COPY killed %31:gr32
784B	  $xmm0 = COPY killed %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
864B	  %23:gr32 = MOV32r0 implicit-def dead $eflags
880B	  $eax = COPY killed %23:gr32
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr killed %3:fr32, killed %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
368B	  %17:gr32 = COPY killed %18:gr32
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed %17:gr32 :: (store (s32) into %ir.19)
416B	  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
448B	  %11:fr32 = COPY killed %14:fr32
464B	  %11:fr32 = DIVSSrr %11:fr32(tied-def 0), killed %13:fr32, implicit $mxcsr
480B	  %8:fr32 = COPY killed %11:fr32
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %21:gr32 = COPY killed %22:gr32
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr killed %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY killed %24:gr64
768B	  $esi = COPY killed %31:gr32
784B	  $xmm0 = COPY killed %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
864B	  %23:gr32 = MOV32r0 implicit-def dead $eflags
880B	  $eax = COPY killed %23:gr32
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
368B	  %17:gr32 = COPY %18:gr32
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
448B	  %11:fr32 = COPY %14:fr32
464B	  %11:fr32 = DIVSSrr %11:fr32(tied-def 0), %13:fr32, implicit $mxcsr
480B	  %8:fr32 = COPY %11:fr32
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %21:gr32 = COPY %22:gr32
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
864B	  %23:gr32 = MOV32r0 implicit-def dead $eflags
880B	  $eax = COPY %23:gr32
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %18:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
368B	  %17:gr32 = COPY %18:gr32
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %14:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
448B	  %11:fr32 = COPY %14:fr32
464B	  %11:fr32 = DIVSSrr %11:fr32(tied-def 0), %13:fr32, implicit $mxcsr
480B	  %8:fr32 = COPY %11:fr32
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %22:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
560B	  %21:gr32 = COPY %22:gr32
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
864B	  %23:gr32 = MOV32r0 implicit-def dead $eflags
880B	  $eax = COPY %23:gr32
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing (simple-register-coalescing) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY killed $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  %3:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  %2:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr %3:fr32, %2:fr32, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  %17:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  %17:gr32 = ADD32ri8 %17:gr32(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, %17:gr32 :: (store (s32) into %ir.19)
416B	  %8:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  %13:fr32 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  %8:fr32 = DIVSSrr %8:fr32(tied-def 0), %13:fr32, implicit $mxcsr
496B	  %8:fr32 = ADDSSrm %8:fr32(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, %8:fr32 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  %21:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  %21:gr32 = ADD32ri8 %21:gr32(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %21:gr32 :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  %31:gr32 = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  %30:fr32 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  %29:fr64 = CVTSS2SDrr %30:fr32, implicit $mxcsr
720B	  %24:gr64 = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
752B	  $rdi = COPY %24:gr64
768B	  $esi = COPY %31:gr32
784B	  $xmm0 = COPY %29:fr64
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
848B	  dead %27:gr32 = COPY $eax
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
416B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
496B	  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
720B	  renamable $rdi = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
416B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
496B	  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
720B	  renamable $rdi = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
416B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
496B	  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
720B	  renamable $rdi = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
416B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
496B	  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
720B	  renamable $rdi = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
416B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
496B	  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
720B	  renamable $rdi = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

0B	bb.0 (%ir-block.0):
	  successors: %bb.1

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
32B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
48B	  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

80B	bb.1 (%ir-block.6):
	; predecessors: %bb.0, %bb.7
	  successors: %bb.8, %bb.2

96B	  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
112B	  JCC_1 %bb.8, 13, implicit killed $eflags

128B	bb.2 (%ir-block.9):
	; predecessors: %bb.1
	  successors: %bb.4, %bb.3

144B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
160B	  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
176B	  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
192B	  JCC_1 %bb.4, 5, implicit $eflags
208B	  JCC_1 %bb.4, 10, implicit killed $eflags

224B	bb.3 (%ir-block.12):
	; predecessors: %bb.2
	  successors: %bb.9

240B	  JMP_1 %bb.9

256B	bb.4 (%ir-block.13):
	; predecessors: %bb.2
	  successors: %bb.6, %bb.5

272B	  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
288B	  JCC_1 %bb.6, 5, implicit killed $eflags

304B	bb.5 (%ir-block.17):
	; predecessors: %bb.4
	  successors: %bb.7

320B	  JMP_1 %bb.7

336B	bb.6 (%ir-block.18):
	; predecessors: %bb.4
	  successors: %bb.7

352B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
384B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
400B	  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
416B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
432B	  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
464B	  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
496B	  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
512B	  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

528B	bb.7 (%ir-block.28):
	; predecessors: %bb.6, %bb.5
	  successors: %bb.1

544B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
576B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
592B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
608B	  JMP_1 %bb.1

624B	bb.8..loopexit:
	; predecessors: %bb.1
	  successors: %bb.9

640B	  JMP_1 %bb.9

656B	bb.9 (%ir-block.31):
	; predecessors: %bb.8, %bb.3

672B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
688B	  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
704B	  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
720B	  renamable $rdi = MOV64ri @.str
736B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
800B	  $al = MOV8ri 1
816B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
832B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=12, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi %stack.1, 1, $noreg, 8, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 %stack.3, 1, $noreg, 0, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 %stack.1, 1, $noreg, 8, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.1, 1, $noreg, 8, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm %stack.2, 1, $noreg, 0, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm %stack.1, 1, $noreg, 8, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible (x86-evex-to-vex-compress) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=12, align=4, at location [SP-28]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
Constant Pool:
  cp#0: 1.000000e+00, align=4

bb.0 (%ir-block.0):
  successors: %bb.1

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store (s32) into %ir.1)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 2 :: (store (s32) into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 1 :: (store (s32) into %ir.5)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store (s32) into %ir.4)

bb.1 (%ir-block.6):
; predecessors: %bb.0, %bb.7
  successors: %bb.8, %bb.2

  CMP32mi8 $rbp, 1, $noreg, -4, $noreg, 15, implicit-def $eflags :: (load (s32) from %ir.4)
  JCC_1 %bb.8, 13, implicit killed $eflags

bb.2 (%ir-block.9):
; predecessors: %bb.1
  successors: %bb.4, %bb.3

  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg
  UCOMISSrr killed renamable $xmm0, killed renamable $xmm1, implicit-def $eflags, implicit $mxcsr
  JCC_1 %bb.4, 5, implicit $eflags
  JCC_1 %bb.4, 10, implicit killed $eflags

bb.3 (%ir-block.12):
; predecessors: %bb.2
  successors: %bb.9

  JMP_1 %bb.9

bb.4 (%ir-block.13):
; predecessors: %bb.2
  successors: %bb.6, %bb.5

  CMP32mi8 $rbp, 1, $noreg, -12, $noreg, 10, implicit-def $eflags :: (load (s32) from %ir.14)
  JCC_1 %bb.6, 5, implicit killed $eflags

bb.5 (%ir-block.17):
; predecessors: %bb.4
  successors: %bb.7

  JMP_1 %bb.7

bb.6 (%ir-block.18):
; predecessors: %bb.4
  successors: %bb.7

  renamable $eax = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.19)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store (s32) into %ir.19)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm1 = CVTSI2SSrm $rbp, 1, $noreg, -8, $noreg, implicit $mxcsr :: (load (s32) from %ir.3)
  renamable $xmm0 = DIVSSrr killed renamable $xmm0(tied-def 0), killed renamable $xmm1, implicit $mxcsr
  renamable $xmm0 = ADDSSrm killed renamable $xmm0(tied-def 0), $noreg, 1, $noreg, @c, $noreg, implicit $mxcsr :: (load (s32) from @c)
  MOVSSmr $noreg, 1, $noreg, @c, $noreg, killed renamable $xmm0 :: (store (s32) into @c)

bb.7 (%ir-block.28):
; predecessors: %bb.6, %bb.5
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load (s32) from %ir.4)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store (s32) into %ir.4)
  JMP_1 %bb.1

bb.8..loopexit:
; predecessors: %bb.1
  successors: %bb.9

  JMP_1 %bb.9

bb.9 (%ir-block.31):
; predecessors: %bb.8, %bb.3

  renamable $esi = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load (s32) from %ir.32)
  renamable $xmm0 = MOVSSrm_alt $noreg, 1, $noreg, @c, $noreg :: (load (s32) from @c)
  renamable $xmm0 = CVTSS2SDrr killed renamable $xmm0, implicit $mxcsr
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 1
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $xmm0, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET64 implicit $eax

# End machine code for function main.

